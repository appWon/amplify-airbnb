type Property @model @searchable @auth(
    rules: [
      { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, operations: [read] }
    ]
  ){
    id: ID!
    title: String!
    hostId: String
    content: String,
    price: Int!,
    pricePerGuest: Int,
    longitude: Float!
    latitude: Float!
    street: String!
    capacity: Int!
    cityId: ID
    countryId: ID
    districtId: ID
    provinceId: ID
    categoryId: ID
    refundId: ID
    typeId: ID
    city: City @hasOne(fields: ["cityId"])
    country: Country @hasOne(fields: ["countryId"])
    district: Districts @hasOne(fields: ["districtId"])
    province: Province  @hasOne(fields: ["provinceId"])
    category: Category  @hasOne(fields: ["categoryId"])
    refund: Refund  @hasOne(fields: ["refundId"])
    type: Type  @hasOne(fields: ["typeId"])
    images: [Image]  @hasMany(indexName: "byImage" ,fields: ["id"])
    facility: [Propertyfacility] @hasMany(indexName: "byPropertyfacility", fields: ["id"])
}

type Image @model @auth(
    rules: [
      { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  url: String!
  propertyId: ID! @index(name: "byImage")
}

type Propertyfacility @model @auth(
    rules: [
      { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
      { allow: owner, operations: [create, read, update, delete] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  facilityId: ID!
  propertyId: ID! @index(name: "byPropertyfacility")
  facility: Facility @hasOne(fields: ["facilityId"])
}

type Type @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
}


type Refund @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  content: String!
}

type Category @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID!
  name: String!
}

type Country @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
  latitude: Float!
  longitude: Float!
}

type Facility @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
}


type City @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
  latitude: Float!
  longitude: Float!
  provinceId: ID!
  province: Province @hasOne(fields: ["provinceId"])
}


type Province @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
  latitude: Float!
  longitude: Float!
  countryId: ID!
  country: Country @hasOne(fields: ["countryId"])
}

type Districts @model @auth(
  rules: [
    { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
    { allow: public, operations: [read] }
  ]){
  id: ID! 
  name: String!
  latitude: Float!
  longitude: Float!
  cityId: ID!
  city: City @hasOne(fields: ["cityId"])
}
