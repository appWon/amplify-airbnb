type Property @model 
@searchable 
@auth(
    rules: [
      # { allow: groups, groups: ["Admin"], operations: [create, delete, read, update] },
      # { allow: owner, operations: [create, read, update, delete] }
      { allow: public }
    ]
  )
  {
    id: ID!
    title: String!
    price: Int!
    location: Location!
    capacity: Int!
    images: [String]!
    facility: [String]
    gade: Int
    type: [String]

    # street: String!
    # capacity: Int!
    # hostId: String
    # content: String
    # pricePerGuest: Int
    # cityId: ID
    # countryId: ID
    # districtId: ID
    # provinceId: ID
    # categoryId: ID
    # refundId: ID
    # typeId: ID
    # city: City @hasOne(fields: ["cityId"])
    # country: Country @hasOne(fields: ["countryId"])
    # district: Districts @hasOne(fields: ["districtId"])
    # province: Province  @hasOne(fields: ["provinceId"])
    # category: Category  @hasOne(fields: ["categoryId"])
    # refund: Refund  @hasOne(fields: ["refundId"])
    # type: Type  @hasOne(fields: ["typeId"])
    # images: [Image]  @hasMany(indexName: "byImage" ,fields: ["id"])
    # facility: [Propertyfacility] @hasMany(indexName: "byPropertyfacility", fields: ["id"])
}

type Location {
  lon: Float!
  lat: Float!
}

type PropertyItemsConnection {
  items: [PropertyItemsConnectionItem]!
  total: Int!
}

type PropertyItemsConnectionItem {
  property: Property!
  distance: Float
}

input PropertyItemsInput {
  km: Int
  from: Int
  limit: Int
}

input LocationInput {
  lon: Float!
  lat: Float!
}

input PropertyFilterInput {
  location: LocationInput
  type: [String]
}

type Query {
  propertyItems(filter: PropertyFilterInput, input: PropertyItemsInput): PropertyItemsConnection
}